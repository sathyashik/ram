{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customersourcefile1",
						"type": "DatasetReference"
					},
					"name": "cutomer"
				},
				{
					"dataset": {
						"referenceName": "peoplesource",
						"type": "DatasetReference"
					},
					"name": "people"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "output",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage2",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "join"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Index as string,",
				"          {Customer Id} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Company as string,",
				"          City as string,",
				"          Country as string,",
				"          {Phone 1} as string,",
				"          {Phone 2} as string,",
				"          Email as string,",
				"          {Subscription Date} as string,",
				"          Website as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> cutomer",
				"source(output(",
				"          Index as string,",
				"          {User Id} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Sex as string,",
				"          Email as string,",
				"          Phone as string,",
				"          {Date of birth} as string,",
				"          {Job Title} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> people",
				"cutomer, people join(cutomer@Index == people@Index,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"join sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['peopleandemployee '],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Index = cutomer@Index,",
				"          {Customer Id},",
				"          {First Name} = cutomer@{First Name},",
				"          {Last Name} = cutomer@{Last Name},",
				"          Company,",
				"          City,",
				"          Country,",
				"          {Phone 1},",
				"          {Phone 2},",
				"          Email = cutomer@Email,",
				"          {User Id},",
				"          {First Name} = people@{First Name},",
				"          {Last Name} = people@{Last Name},",
				"          Sex,",
				"          Email = people@Email,",
				"          Phone,",
				"          {Date of birth},",
				"          {Job Title}",
				"     ),",
				"     partitionBy('hash', 1)) ~> output"
			]
		}
	}
}